name: Monorepo pipeline

on:
  push:
    branches:
      - 'master'
      - 'release/**'
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches:
      - master
      - ci-fork-fix

env:
  DOCKER_REGISTRY: 821090935708.dkr.ecr.eu-west-1.amazonaws.com/

jobs:
  prepare:
    #runs-on: self-hosted
    runs-on: ubuntu-latest
    timeout-minutes: 15 #pulling dependencies potentially twice - host OS and docker layer

    env:
      AFFECTED_ALL: ${{ secrets.AFFECTED_ALL }}
      CHUNK_SIZE: '2'

    outputs:
      GIT_BRANCH: ${{ steps.git_refs.outputs.GIT_BRANCH }}
      DOCKER_TAG: ${{ steps.docker_tags.outputs.DOCKER_TAG }}
      LAST_GOOD_BUILD_DOCKER_TAG: ${{ steps.git_nx_base.outputs.LAST_GOOD_BUILD_DOCKER_TAG }}
      PUBLISH: ${{ steps.publish_flag.outputs.PUBLISH }}
      TEST_CHUNKS: ${{ steps.test_projects.outputs.CHUNKS }}
      LINT_CHUNKS: ${{ steps.lint_projects.outputs.CHUNKS }}
      DOCKER_EXPRESS_CHUNKS: ${{ steps.docker_express_projects.outputs.CHUNKS }}
      DOCKER_NEXT_CHUNKS: ${{ steps.docker_next_projects.outputs.CHUNKS }}
      DOCKER_STATIC_CHUNKS: ${{ steps.docker_static_projects.outputs.CHUNKS }}
      UNAFFECTED: ${{ steps.docker_unaffected_projects.outputs.UNAFFECTED }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Git refs
        id: git_refs
        run: |
          export GIT_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF/refs\/heads\//}}"
          if [[ ! -z "$GITHUB_BASE_REF" ]]
          then
           # a PR
           GIT_BASE_BRANCH=$GITHUB_BASE_REF
          else
           # on master
           GIT_BASE_BRANCH=master
          fi
          echo "::set-env name=GIT_BRANCH::${GIT_BRANCH}"
          echo "::set-output name=GIT_BRANCH::${GIT_BRANCH}"
          echo "::set-env name=GIT_BASE_BRANCH::${GIT_BASE_BRANCH}"
          echo "Base branch is '${GIT_BASE_BRANCH}'"
          echo "Branch is '${GIT_BRANCH}'"

      - name: Generate docker image tag
        id: docker_tags
        run: |
          export DOCKER_BRANCH_TAG=$(echo ${GIT_BRANCH} | tr "/." "-" )
          export DOCKER_TAG=${GITHUB_RUN_NUMBER}_${DOCKER_BRANCH_TAG}_${GITHUB_SHA:0:7}
          echo "Docker tag will be ${DOCKER_TAG}"
          echo "::set-output name=DOCKER_TAG::${DOCKER_TAG}"
          echo "::set-env name=DOCKER_TAG::${DOCKER_TAG}"

      - run: git fetch --prune --unshallow
      - run: |
          echo "::set-env name=HEAD::${GITHUB_SHA}"
        id: git_nx_head
        name: Preparing HEAD tag
      - run: |
          if [[ ! -z "$GITHUB_BASE_REF" ]]
          then
            export BRANCH=$GIT_BASE_BRANCH
          else
            export BRANCH=$GIT_BRANCH
          fi
          NUMBER_NEWER_COMMITS_THEN_ME=`git log --format=%H --first-parent "$BRANCH"  $GITHUB_SHA... $BRANCH | wc -l | tr -d '[:space:]'`
          LAST_GOOD_BUILD=`git log --format=%H --first-parent "$BRANCH" | tail -n +$((NUMBER_NEWER_COMMITS_THEN_ME+1)) | node .github/actions/dist/index.js`
          LAST_GOOD_BUILD_SHA=`echo $LAST_GOOD_BUILD | jq -r '.sha'`
          LAST_GOOD_BUILD_BRANCH=`echo $LAST_GOOD_BUILD | jq -r '.branch'`
          LAST_GOOD_BUILD_RUN_NUMBER=`echo $LAST_GOOD_BUILD | jq -r '.run_number'`
          echo "Last successful build on $BRANCH is with SHA '$LAST_GOOD_BUILD_SHA', branch '$LAST_GOOD_BUILD_BRANCH' and number '$LAST_GOOD_BUILD_RUN_NUMBER'"
          echo "::set-env name=BASE::$LAST_GOOD_BUILD_SHA"
          LAST_GOOD_BUILD_DOCKER_BRANCH_TAG=$(echo ${LAST_GOOD_BUILD_BRANCH} | tr "/." "-" )
          export LAST_GOOD_BUILD_DOCKER_TAG=${LAST_GOOD_BUILD_RUN_NUMBER}_${LAST_GOOD_BUILD_DOCKER_BRANCH_TAG}_${LAST_GOOD_BUILD_SHA:0:7}
          echo "Last successful docker tag '$LAST_GOOD_BUILD_DOCKER_TAG'"
          echo "::set-env name=LAST_GOOD_BUILD_DOCKER_TAG::${LAST_GOOD_BUILD_DOCKER_TAG}"
          echo "::set-output name=LAST_GOOD_BUILD_DOCKER_TAG::${LAST_GOOD_BUILD_DOCKER_TAG}"

        id: git_nx_base
        name: Preparing BASE tags

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_BRANCH: ${{ env.GIT_BASE_BRANCH }}
      - name: GitHub envs
        run: env | grep GITHUB

      - name: Set publish flag
        id: publish_flag
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            export PUBLISH=false
          else
            export PUBLISH=true
          fi
          echo "::set-env name=PUBLISH::${PUBLISH}"
          echo "::set-output name=PUBLISH::${PUBLISH}"

      - name: Cache for NodeJS dependencies - Docker layer
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-3

      - name: Cache for NodeJS dependencies - host OS
        id: node-modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-yarn

      - name: Building NodeJS dependencies - host OS
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Building NodeJS dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: ./scripts/prepare_deps.sh

      - name: set BRANCH env var
        run: echo "::set-env name=BRANCH::${GIT_BRANCH}"

      - name: Security audit Node modules
        run: yarn run security-audit

      - name: License audit Node modules
        run: yarn run license-audit

      - name: Prepare lint targets
        id: lint_projects
        run: |
          PROJECTS=`./scripts/_nx-affected-targets.sh lint`
          echo "Projects: ${PROJECTS}"
          CHUNKS=`CHUNK_SIZE=7 node scripts/_chunk.js "${PROJECTS}"`
          echo "Chunks: $CHUNKS"
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare test targets
        id: test_projects
        run: |
          PROJECTS=`./scripts/_nx-affected-targets.sh test`
          echo "Projects: ${PROJECTS}"
          CHUNKS=`node scripts/_chunk.js "${PROJECTS}"`
          echo "Chunks: $CHUNKS"
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare docker-express targets
        id: docker_express_projects
        run: |
          PROJECTS=`./scripts/_nx-affected-targets.sh docker-express`
          echo "Projects: ${PROJECTS}"
          CHUNKS=`node scripts/_chunk.js "${PROJECTS}"`
          echo "Chunks: $CHUNKS"
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare docker-next targets
        id: docker_next_projects
        run: |
          PROJECTS=`./scripts/_nx-affected-targets.sh docker-next`
          echo "Projects: ${PROJECTS}"
          CHUNKS=`node scripts/_chunk.js "${PROJECTS}"`
          echo "Chunks: $CHUNKS"
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare docker-static targets
        id: docker_static_projects
        run: |
          PROJECTS=`./scripts/_nx-affected-targets.sh docker-static`
          echo "Projects: ${PROJECTS}"
          CHUNKS=`node scripts/_chunk.js "${PROJECTS}"`
          echo "Chunks: $CHUNKS"
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare unaffected docker images
        id: docker_unaffected_projects
        run: |
          UNAFFECTED=`./scripts/list-unaffected.sh docker-next docker-express docker-static`
          echo "Unaffected Docker images: ${UNAFFECTED}"
          echo "::set-output name=UNAFFECTED::$UNAFFECTED"

  tests:
    services:
      postgres:
        image: postgres:11.6
        env:
          POSTGRES_DB: application_test
          POSTGRES_PASSWORD: application_test
          POSTGRES_USER: application_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      # TODO: make this more generic (workflows should trigger these services)
      APPLICATION_TEST_DB_USER: application_test
      APPLICATION_TEST_DB_PASS: application_test
      APPLICATION_TEST_DB_NAME: application_test
      APPLICATION_DB_HOST: localhost
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.TEST_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}

      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-3
      - name: Cache for NodeJS dependencies - host OS
        if: ${{ matrix.projects != 'dummy' }}
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-yarn
      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest
      - name: Running tests
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh test
      # - name: Running E2E tests
      #   run: yarn run affected:e2e --base origin/master

  formatting:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
    steps:
      - uses: actions/checkout@v2
      - name: Cache for NodeJS dependencies - host OS
        id: node-modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-yarn
      - name: Check formatting
        run: ./scripts/check_formatting.sh

  linting:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 25 # linting has proven to be quite resource intensive
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.LINT_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}

      - name: Cache for NodeJS dependencies - host OS
        if: ${{ matrix.projects != 'dummy' }}
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-yarn

      - name: Linting
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh lint

  docker-express:
    needs: [prepare, tests]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.DOCKER_EXPRESS_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}
      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-3
      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest
      - name: Docker login to ECR repo
        if: ${{ matrix.projects != 'dummy' }}
        run: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Building Docker images
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh docker-express

  docker-static:
    needs: [prepare, tests]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.DOCKER_STATIC_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}
      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-3
      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest
      - name: Docker login to ECR repo
        if: ${{ matrix.projects != 'dummy' }}
        run: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Building Docker images
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh docker-static

  docker-next:
    needs: [prepare, tests]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.DOCKER_NEXT_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}
      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-3
      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest
      - name: Docker login to ECR repo
        if: ${{ matrix.projects != 'dummy' }}
        run: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Building Docker images
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh docker-next

  retag-unaffected:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      [docker-express, docker-next, docker-static, prepare, linting, formatting]
    env:
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
      UNAFFECTED: ${{ needs.prepare.outputs.UNAFFECTED }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      LAST_GOOD_BUILD_DOCKER_TAG: ${{ needs.prepare.outputs.LAST_GOOD_BUILD_DOCKER_TAG}}

    steps:
      - uses: actions/checkout@v2
        if: env.PUBLISH == 'true'
      - name: Retag unaffected Docker images
        if: env.PUBLISH == 'true'
        run: ./scripts/retag-unaffected.sh "$UNAFFECTED"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  trigger-deployments:
    runs-on: ubuntu-latest
    needs: [retag-unaffected, prepare]
    env:
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    strategy:
      matrix:
        service: [islandis, gjafakort, air-discount-scheme]
    steps:
      - uses: actions/checkout@v2
      - name: Trigger Deployment for service
        if: env.PUBLISH == 'true'
        env:
          SPINNAKER_URL: https://spinnaker-gate.shared.devland.is
          SPINNAKER_WEBHOOK_TOKEN: ${{ secrets.SPINNAKER_WEBHOOK_TOKEN }}
        run: |
          curl -v $SPINNAKER_URL/webhooks/webhook/${{matrix.service}} -H "content-type: application/json" --data-binary @- <<BODY
          {
          "token": "$SPINNAKER_WEBHOOK_TOKEN",
          "branch": "$GIT_BRANCH",
          "parameters": { "docker_tag": "$DOCKER_TAG" }
          }
          BODY

  failure-notification:
    runs-on: ubuntu-latest
    if: failure()
    needs:
      [
        docker-express,
        docker-next,
        docker-static,
        prepare,
        linting,
        formatting,
        trigger-deployments,
      ]
    env:
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          icon_emoji: ':broken_heart:'
          fields: repo,message,commit,author,action,eventName,ref,workflow,took # selectable (default: repo,message)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # optional
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: env.PUBLISH == 'true'
